<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Win10环境+ CUDA9.0 +CUDNN7.0+TensorFlow1.7_1.6_1.5配置（亲测有效）</title>
      <link href="/2020/05/24/Win10%E7%8E%AF%E5%A2%83+%20CUDA9.0%20+CUDNN7.0+TensorFlow1.7_1.6_1.5%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/"/>
      <url>/2020/05/24/Win10%E7%8E%AF%E5%A2%83+%20CUDA9.0%20+CUDNN7.0+TensorFlow1.7_1.6_1.5%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>前言：很多小伙伴在选择CUDA版本和cudnn版本上有疑问，这里简短的说一下，希望能帮到各位小伙伴，我在网上看到有人说，要根据自己的显卡来选择CUDA，其实是错误的，你可以下载自己所需要的CUDA版本,这只是个驱动而已。CUDA的版本和cundd的版本要对应，不然可能会有不兼容报错。CUDA是显卡驱动程序，cundd是用来加速深度学习训练的库，在训练网络时，使用GPU加速，会调CUDA驱动和cudnn库，安装时两者要联系起来，本文的第二步，就是做这个事。</p><a id="more"></a><p>系统环境：windows10     64位</p><p>显卡：GTX1060</p><p>CUDA版本:cuda_9.0.176_win10（配套的cudnn一定要是7版本）</p><p>下载地址：<a href="https://developer.nvidia.com/cuda-90-download-archive" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-90-download-archive</a></p><p>CUDNN版本:cudnn-9.0-windows10-x64-v7（7版本的）</p><p>下载地址：<a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">https://developer.nvidia.com/cudnn</a></p><p>TensorFlow-gpu版本：TensorFlow1.7（1.6和1.5也支持）</p><p>1.下载CUDA, <a href="https://developer.nvidia.com/cuda-90-download-archive" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-90-download-archive</a></p><p>按照自己机器的信息选择，下图是我自己机器信息：<br><img src="https://img-blog.csdnimg.cn/20191208184341759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载完之后直接点击运行，会自行安装，安装时会让你选择一个文件夹作为抽取文件临时存放，记住这不是安装文件夹，安装文件夹系统会自动安装到C盘，具体我后面会提到，临时文件夹安装完后会自动删除。</p><p>2.下载cudnn,下载地址：<a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">https://developer.nvidia.com/cudnn</a>，进去之后,找到对应的版本，点击Download，他会要你注册登录，然后填个问卷，才可以下载，这一步自行按照网站提示做就可以了。提交完问卷后，就可以点击下载了。以下是版本选择界面：</p><p><img src="https://img-blog.csdnimg.cn/20191208184420513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>勾选这个，然后选择要下载的版本，我选的是图中划线那个（应该选择7.0版本，7.1可能有些不兼容）<br><img src="https://img-blog.csdnimg.cn/20191208184416438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191208184439173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">下载完，解压cudnn,会出现四个文件，如下：<br><img src="https://img-blog.csdnimg.cn/20191208184453559.png" alt="在这里插入图片描述"><br>接下来，我们要将CUDA和CUDNN链接起来，这样CUDA才能调用CUDNN.这里有两种方法将CUDA和CUDNN链接起来</p><p>第一种：</p><p>在环境变量下面，把解压后文件的bin目录加到系统环境变量中，放在path下面，如图：</p><p><img src="https://img-blog.csdnimg.cn/20191208184503194.png" alt="在这里插入图片描述"><br>重启一下电脑，让环境变量生效，完成。</p><p>第二种：</p><p>就是把cudnn中的库加入到CUDA中，因为CUDA系统会自动安装到c盘的Program Files文件中，选择该文件夹下的NVIDIA GPUComputing Toolkit文件，一直到<br><img src="https://img-blog.csdnimg.cn/20191208184518631.png" alt="在这里插入图片描述">这个文件夹下有如下文件，我标出的这三个，和cudnn中的前三个文件是对应的如下图：<br><img src="https://img-blog.csdnimg.cn/20191208184534107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>接下来要做的就是，把cudnn三个文件夹中的文件，复制到CUDA相应文件夹的下面（仔细看一下就会发现他们的目录结构是一样的），完成。</p><p>3.安装TensorFlow</p><p>安装：在命令窗口中输入pip install tensorflow-gpu，</p><p>如果要安装（更新）最新的版本，可输入： pip install –upgrade tensorFlow-gpu</p><p>等待安装完成即可</p><p>4.现在CUDA,cudnn,TensorFlow都已经安装好了，可以尽情的去写TensorFlow代码啦！</p><p>（注：新手第一次使用TensorFlow-GPU版时，训练网络时应该在tf.session处做一点修改，如下：</p><p>将with tf.Session() as sess:</p><p>改为：</p><p>config = tf.ConfigProto()<br>config.gpu_options.allow_growth = True</p><p>with tf.Session(config=config) as sess:</p><p>否则可能会报错：<br><img src="https://img-blog.csdnimg.cn/20191208184545326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>原因是当TensorFlow要大量使用GPU时，不会自动给其分配资源，需要手动调整。</p><p>）</p>]]></content>
      
      
      <categories>
          
          <category> TensorFlow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
            <tag> CUDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用清华镜像快速下载TensorFlow各版本及已安装版本查看</title>
      <link href="/2020/05/24/%E4%BD%BF%E7%94%A8%E6%B8%85%E5%8D%8E%E9%95%9C%E5%83%8F%E5%BF%AB%E9%80%9F%E4%B8%8B%E8%BD%BDTensorFlow%E5%90%84%E7%89%88%E6%9C%AC%E5%8F%8A%E5%B7%B2%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%E6%9F%A5%E7%9C%8B/"/>
      <url>/2020/05/24/%E4%BD%BF%E7%94%A8%E6%B8%85%E5%8D%8E%E9%95%9C%E5%83%8F%E5%BF%AB%E9%80%9F%E4%B8%8B%E8%BD%BDTensorFlow%E5%90%84%E7%89%88%E6%9C%AC%E5%8F%8A%E5%B7%B2%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<p>使用清华镜像快速下载TensorFlow各版本：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-gpu==<span class="number">1.12</span><span class="number">.0</span> -i https://pypi.tuna.tsinghua.edu.cn/simple <span class="comment">#可改成任意版本</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TensorFlow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
            <tag> 清华镜像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用python不到3秒找出1亿以内的质数</title>
      <link href="/2020/05/24/%E7%94%A8python%E4%B8%8D%E5%88%B03%E7%A7%92%E6%89%BE%E5%87%BA1%E4%BA%BF%E4%BB%A5%E5%86%85%E7%9A%84%E8%B4%A8%E6%95%B0/"/>
      <url>/2020/05/24/%E7%94%A8python%E4%B8%8D%E5%88%B03%E7%A7%92%E6%89%BE%E5%87%BA1%E4%BA%BF%E4%BB%A5%E5%86%85%E7%9A%84%E8%B4%A8%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>下面是用python不到3秒找出1亿以内的质数</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_prime</span><span class="params">(upper)</span>:</span></span><br><span class="line">    <span class="string">"""找出小于upper的所有质数"""</span></span><br><span class="line">    </span><br><span class="line">    prime_list = list()</span><br><span class="line">    mid = int(np.sqrt(upper))</span><br><span class="line">    nums = np.arange(upper)</span><br><span class="line">    nums[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        primes = nums[nums&gt;<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> primes.any():</span><br><span class="line">            p = primes[<span class="number">0</span>]</span><br><span class="line">            prime_list.append(p)</span><br><span class="line">            nums[p::p] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> p &gt; mid:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    prime_list.extend(nums[nums&gt;<span class="number">0</span>].tolist())</span><br><span class="line">    <span class="keyword">return</span> prime_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fast_find_prime</span><span class="params">(upper, base=<span class="number">100000</span>, block=<span class="number">20000000</span>)</span>:</span></span><br><span class="line">    <span class="string">"""快速找出小于upper的所有质数"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> upper &lt;= base:</span><br><span class="line">        <span class="keyword">return</span> find_prime(upper)</span><br><span class="line">        </span><br><span class="line">    mid = int(np.sqrt(upper))</span><br><span class="line">    prime_list = find_prime(base)</span><br><span class="line">    prime_array = np.array(prime_list)</span><br><span class="line">    prime_array = prime_array[prime_array&lt;=mid]</span><br><span class="line">    </span><br><span class="line">    start = base</span><br><span class="line">    <span class="keyword">while</span> start &lt; upper:</span><br><span class="line">        end = start + block</span><br><span class="line">        <span class="keyword">if</span> end &gt; upper:</span><br><span class="line">            end = upper</span><br><span class="line">        print((start, end))</span><br><span class="line">        </span><br><span class="line">        prime_list.extend(process_func(start, np.copy(prime_array), (start, end)))</span><br><span class="line">        start += block</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> prime_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_func</span><span class="params">(id, primes, task_range)</span>:</span></span><br><span class="line">    <span class="string">"""执行分块任务的函数</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    primes      - 用以剔除非质数的质数表</span></span><br><span class="line"><span class="string">    task_range  - 分块任务的数值范围</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    nums = np.arange(task_range[<span class="number">0</span>], task_range[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> primes:</span><br><span class="line">        k = (p-task_range[<span class="number">0</span>]%p)%p</span><br><span class="line">        nums[k::p] = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nums[nums&gt;<span class="number">0</span>].tolist()</span><br><span class="line"></span><br><span class="line">upper = <span class="number">100000000</span></span><br><span class="line">t0 = time.time()</span><br><span class="line">prime_list = fast_find_prime(upper)</span><br><span class="line">t1 = time.time()</span><br><span class="line">print(<span class="string">'查找%d以内的质数耗时%0.3f秒，共找到%d个质数'</span>%(upper, t1-t0, len(prime_list)))</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200128193049230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数字统计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs安装与配置</title>
      <link href="/2020/05/22/nodejs%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/05/22/nodejs%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>1.下载对应的nodejs安装包</p><a id="more"></a><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br><img src="https://img-blog.csdnimg.cn/20200516104258997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  2.运行安装包，选择相关的路径，主要注意点如下选择add to path,因为这样会自动给你配置对应的环境变量，其余的都是直接下一步下一步然后install<br>  <img src="https://img-blog.csdnimg.cn/20200516104311876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>    3.检验是否安装成功，执行两个命令node -v 和npm -v(这个主要高版本的nodejs会在安装的过程中自动帮你安装的，主要的作用是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西) 分别查看版本信息<br>    <img src="https://img-blog.csdnimg.cn/20200516104323438.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何发布文章到自己搭建的hexo博客上！</title>
      <link href="/2020/05/21/%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E5%88%B0%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%EF%BC%81/"/>
      <url>/2020/05/21/%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E5%88%B0%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>下面是发布博客的两种方法</p><a id="more"></a><h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h2><p>1.选择一个markdown编辑器，我觉得csdn自带的md编辑器就挺好用的，所以你可以注册一个csdn帐号，微信扫一扫就ok；<br>2.注册成功后登录进去，由于默认的是HTML编辑器，所以我们需要先修改下默认设置，首先找到右上角头像的位置，选择账号设置，然后如图选择我的博客<br><img src="https://img-blog.csdnimg.cn/20200520104623487.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200520104629475.png" alt="在这里插入图片描述"><br>next 往下翻找到 默认编辑器类型：选择MarkDown编辑器 保存就ok了；<br>3.点击写博客，先了解下markdown编辑器基本的用法，然后就可以写博客了，写好之后导出到本地<br><img src="https://img-blog.csdnimg.cn/20200520104651170.png" alt="在这里插入图片描述"><br>如图，点击后选择MarkDown，会下载一个 .md 文件；然后找到这个md文件，把它复制到你hexo博客文件夹 中 source 下的 _posts 中，默认只有一个 hello-world.md；</p><ol start="4"><li>复制完之后然后使用文本编辑器打开它，在第一行加上title，内容自定，如</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title: this is my first blog</span><br></pre></td></tr></table></figure><p>5.接着在你博客站点文件夹下右键空白处，选择Git Bash Here，输入 hexo g (完整命令为hexo generate)，用于生成静态文件<br>6 然后 输入 hexo s(完整命令为hexo server)，用于启动服务器，主要用来本地预览；完成后 打开浏览器输入 localhost:4000，会发现多了你刚写的那篇博客<br>7 最后输入hexo d(hexo deploy)，用于将本地文件发布到github等git仓库上；<br>8 好了，大功告成！</p><h2 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h2><p>① 新建一个空文章，输入以下命令，会在项目 \Hexo\source_posts 中生成 文章标题.md 文件，文章标题根据需要命名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n <span class="string">"文章标题"</span></span><br></pre></td></tr></table></figure><p>也可以直接在 \Hexo\source_posts 目录下右键鼠标新建文本文档，改后缀为 .md 即可，这种方法比较方便</p><p>② 用编辑器编写文章</p><p>md 全称 Markdown， Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会， .md 文件可以使用支持 Markdown 语法的编辑器编辑，然后保存文件到 \Hexo\source_posts 文件夹下即可</p><p>推荐 Windows 上使用 MarkdownPad2 或者小书匠 编辑器，macOS 上使用 Mou 编辑器，Linux 上使用 Remarkable编辑器，Web 端上使用CSDN ，其他编辑器推荐可以参考我的另一篇文章：《最新主流 Markdown 编辑器推荐》</p><p>文章标题，标签，分类，封面图片，摘要等，可以在 Front-matter 里面配置（Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，官方文档：<a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/front-matter</a> ），举个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: 页面布局（配合主题文档使用）</span><br><span class="line">title: 文章名称</span><br><span class="line">date: 文章日期</span><br><span class="line">comments: 文章是否开启评论</span><br><span class="line">photos: 文章封面图（仅部分主题支持）</span><br><span class="line">tags: </span><br><span class="line">  - 文章标签一</span><br><span class="line">  - 文章标签二</span><br><span class="line">categories: 文章分类</span><br><span class="line">description: 文章描述，即要在首页显示的摘要（仅部分主题支持）</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">这里是摘要</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">这里是正文</span><br><span class="line"></span><br><span class="line">注意：description 和 &lt;!-- more --&gt; 方式显示摘要二选一即可，部分主题不支持description，每个配置英文冒号后面要空一格，不同主题配置有所差异，具体要参考主题文档</span><br></pre></td></tr></table></figure><p>当我们用编辑器写好文章后，可以使用以下命令将其推送到服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  </span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>或者将两个命令合二为一输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure><p>现在访问你的博客就可以看见写好的文章啦！</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 发布博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github 和 Hexo 搭建自己的独立博客</title>
      <link href="/2020/05/20/%E4%BD%BF%E7%94%A8%20Github%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/05/20/%E4%BD%BF%E7%94%A8%20Github%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>我的博客地址：<a href="https://supremezjc.github.io" target="_blank" rel="noopener">https://supremezjc.github.io</a></p><a id="more"></a><p>@<a href="文章主题">TOC</a></p><h2 id="●-入门"><a href="#●-入门" class="headerlink" title="● 入门"></a>● 入门</h2><p>Github Pages<br>Github Pages可以被认为是用户编写的、托管在github上的静态网页。使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。此外还可以绑定自己的域名。</p><p>Hexo<br>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="●-安装-Node-js"><a href="#●-安装-Node-js" class="headerlink" title="● 安装 Node.js"></a>● 安装 Node.js</h2><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">点击此处</a>访问官网，按需下载相应版本，默认安装可以了。<br>如果不懂可以看我的另一篇文章<br><a href="https://blog.csdn.net/weixin_44517301/article/details/106155725" target="_blank" rel="noopener">nodejs的安装和配置</a></p><p><img src="https://img-blog.csdnimg.cn/20200520154538938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="●-安装-Git"><a href="#●-安装-Git" class="headerlink" title="● 安装 Git"></a>● 安装 Git</h2><p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">点击此处访问官网，按需下载相应版本，默认安装即可 </a></p><h3 id="•-检验Git是否安装成功"><a href="#•-检验Git是否安装成功" class="headerlink" title="• 检验Git是否安装成功"></a>• 检验Git是否安装成功</h3><p>同时按下 Win 键和 R 键打开运行窗口,输入 cmd ，然后输入以下命令，有相应版本信息显示则安装成功，若不正确可以卸载软件重新安装，此外若安装成功，在桌面右键鼠标，可以看到菜单里多了 Git GUI Here 和 Git Bash Here两个选项，第一个是图形界面的Git操作，另一个是命令行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git --version  </span><br><span class="line">$ node -v  </span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200520155648411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200520155654136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="●-安装Hexo"><a href="#●-安装Hexo" class="headerlink" title="● 安装Hexo"></a>● 安装Hexo</h2><p>选择一个磁盘，新建一个文件夹，自己重命名文件夹（如：我的文件夹为：Ｅ\TRHX_Blog），博客相关文件将储存在此文件夹下，在该文件夹下右键鼠标，点击 Git Bash Here，输入以下 npm 命令即可安装，第一个命令表示安装 hexo，第二个命令表示安装 hexo 部署到 git page 的 deployer，如图所示即为安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g  </span><br><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200520155736814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="•-Hexo-初始化配置"><a href="#•-Hexo-初始化配置" class="headerlink" title="• Hexo 初始化配置"></a>• Hexo 初始化配置</h3><p>在刚才新建的文件夹里面再次新建一个 Hexo 文件夹（如：我的文件夹为：E\TRHX_Blog\Hexo）,进入该 Hexo 文件夹右键鼠标，点击 Git Bash Here，输入以下命令，如图所示则安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200520155815590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Hexo 安装完成后，将会在指定文件夹中新建所需要的文件，Hexo 文件夹下的目录如下：<br><img src="https://img-blog.csdnimg.cn/20200520155830378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="●-本地查看效果"><a href="#●-本地查看效果" class="headerlink" title="● 本地查看效果"></a>● 本地查看效果</h2><p>执行以下命令，执行完即可登录 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate  </span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>显示以下信息说明操作成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200520155922651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="●-将博客部署到-Github-Pages-上"><a href="#●-将博客部署到-Github-Pages-上" class="headerlink" title="● 将博客部署到 Github Pages 上"></a>● 将博客部署到 Github Pages 上</h2><p>到目前为止，我们的本地博客就成功搭建了，但是现在我们只能通过本地连接查看博客，我们要做的是让其他人也能够访问我们的博客，这就需要我们将博客部署到Github Pages上</p><h3 id="•-注册-Github-账户"><a href="#•-注册-Github-账户" class="headerlink" title="• 注册 Github 账户"></a>• 注册 Github 账户</h3><p><a href="https://github.com/" target="_blank" rel="noopener">点击此处访问 Github 官网，点击 Sign Up 注册账户</a></p><h3 id="•-创建项目代码库"><a href="#•-创建项目代码库" class="headerlink" title="• 创建项目代码库"></a>• 创建项目代码库</h3><p>点击 New repository 开始创建，步骤及注意事项见下图：</p><p><img src="https://img-blog.csdnimg.cn/20200520160058677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="•-配置-SSH-密钥"><a href="#•-配置-SSH-密钥" class="headerlink" title="• 配置 SSH 密钥"></a>• 配置 SSH 密钥</h3><p>只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面（如：我的文件夹为：Ｅ\TRHX_Blog） Git Bash Here 输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"your email@example.com"</span> </span><br><span class="line">//引号里面填写你的邮箱地址，比如我的是1248164682.qq.com</span><br></pre></td></tr></table></figure><p>之后会出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.  </span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/you/.ssh/id_rsa):  </span><br><span class="line">//到这里可以直接回车将密钥按默认文件进行存储</span><br></pre></td></tr></table></figure><p>然后会出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):  </span><br><span class="line">//这里是要你输入密码，其实不需要输什么密码，直接回车就行 </span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>接下来屏幕会显示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.  </span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.pub.  </span><br><span class="line">The key fingerprint is:  </span><br><span class="line">这里是各种字母数字组成的字符串，结尾是你的邮箱  </span><br><span class="line">The key<span class="string">'s randomart image is:  </span></span><br><span class="line"><span class="string">这里也是各种字母数字符号组成的字符串</span></span><br></pre></td></tr></table></figure><p>运行以下命令，将公钥的内容复制到系统粘贴板上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="•-在-GitHub-账户中添加你的公钥"><a href="#•-在-GitHub-账户中添加你的公钥" class="headerlink" title="• 在 GitHub 账户中添加你的公钥"></a>• 在 GitHub 账户中添加你的公钥</h3><p>① 登陆 GitHub，进入 Settings：<br><img src="https://img-blog.csdnimg.cn/20200520160520620.png" alt="在这里插入图片描述"><br>② 点击 SSH and GPG Keys：<br><img src="https://img-blog.csdnimg.cn/20200520160607941.png" alt="在这里插入图片描述"><br>③ 选择 New SSH key：<br><img src="https://img-blog.csdnimg.cn/20200520160619170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>④ 粘贴密钥：<br><img src="https://img-blog.csdnimg.cn/20200520160634868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="•-测试"><a href="#•-测试" class="headerlink" title="• 测试"></a>• 测试</h3><p>输入以下命令：注意：<a href="mailto:git@github.com">git@github.com</a>不要做任何更改！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>之后会显示：<br><img src="https://img-blog.csdnimg.cn/20200520160821685.png" alt="在这里插入图片描述"><br>输入 yes 后会显示：<br><img src="https://img-blog.csdnimg.cn/2020052016083213.png" alt="在这里插入图片描述"></p><h3 id="•-配置-Git-个人信息"><a href="#•-配置-Git-个人信息" class="headerlink" title="• 配置 Git 个人信息"></a>• 配置 Git 个人信息</h3><p>Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"此处填你的用户名"</span>  </span><br><span class="line">$ git config --global user.email  <span class="string">"此处填你的邮箱"</span></span><br></pre></td></tr></table></figure><p>到此为止 SSH Key 配置成功，本机已成功连接到 Github</p><h2 id="●-将本地的-Hexo-文件更新到-Github-的库中"><a href="#●-将本地的-Hexo-文件更新到-Github-的库中" class="headerlink" title="● 将本地的 Hexo 文件更新到 Github 的库中"></a>● 将本地的 Hexo 文件更新到 Github 的库中</h2><p>① 登录 Github 打开自己的项目 your name.github.io<br><img src="https://img-blog.csdnimg.cn/20200520161042901.png" alt="在这里插入图片描述"><br>② 鼠标移到 Clone or download 按钮，选择 Use SSH<br><img src="https://img-blog.csdnimg.cn/20200520161054104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>③ 一键复制地址<br><img src="https://img-blog.csdnimg.cn/20200520161105542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>④ 打开你创建的 Hexo 文件夹（如：E:\TRHX_Blog\Hexo），右键用记事本（Notepad++或者VS code等都可以）打开该文件夹下的 _config.yml 文件<br><img src="https://img-blog.csdnimg.cn/20200520161116148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>⑤ 按下图修改 _config.yml 文件并保存<br><img src="https://img-blog.csdnimg.cn/2020052016112919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>⑥ 在 Hexo 文件夹下分别执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g  </span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>或者直接执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><p>执行完之后会让你输入你的 Github 的账号和密码，如果此时报以下错误，说明你的 deployer 没有安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure><p>需要执行以下命令再安装一次：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>再执行 hexo g -d，你的博客就会部署到 Github 上了<br>⑦ 访问博客</p><p>你的博客地址：https://你的用户名.github.io，比如我的是：<a href="https://supemezjc.github.io" target="_blank" rel="noopener">https://supemezjc.github.io</a> ,现在每个人都可以通过此链接访问你的博客了。</p><p>在博客中发表文章和申请域名请看我的其他文章。<br>这里非常感谢这位博主：<a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">https://blog.csdn.net/qq_36759224/article/details/82121420</a><br>他写的非常详细。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1431226532&auto=0&height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26 种不同的编程语言的 “Hello World” 程序</title>
      <link href="/2020/05/18/26%20%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%20%E2%80%9CHello%20World%E2%80%9D%20%E7%A8%8B%E5%BA%8F/"/>
      <url>/2020/05/18/26%20%E7%A7%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%20%E2%80%9CHello%20World%E2%80%9D%20%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>下面是用26中计算机语言编写的”Hello World”</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> C</span><br><span class="line"><span class="comment">#include </span></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(<span class="string">"Hello, World"</span>);</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span> C++</span><br><span class="line"><span class="comment">#include </span></span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Hello World"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3.</span> C<span class="comment">#</span></span><br><span class="line">using System;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line">&#123;</span><br><span class="line">    public static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Hello, World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">4.</span> Bash</span><br><span class="line">echo <span class="string">"Hello, World"</span></span><br><span class="line"><span class="number">5.</span> Basic</span><br><span class="line">PRINT <span class="string">"Hello, World"</span></span><br><span class="line"><span class="number">6.</span> HTML</span><br><span class="line"> Hello, World</span><br><span class="line"><span class="number">7.</span> Java</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">8.</span> Clipper</span><br><span class="line">? "Hello, World"</span><br><span class="line"><span class="number">9.</span> Delphi</span><br><span class="line">program HelloWorld;</span><br><span class="line">begin</span><br><span class="line">  Writeln(<span class="string">'Hello, World'</span>);</span><br><span class="line">end.</span><br><span class="line"><span class="number">10.</span> CoffeeScript</span><br><span class="line">console.log <span class="string">'Hello, World'</span></span><br><span class="line"><span class="number">11.</span> MatLab</span><br><span class="line">disp(<span class="string">'Hello, World'</span>)</span><br><span class="line"><span class="number">12.</span> Julia</span><br><span class="line">println(<span class="string">"Hello, World"</span>)</span><br><span class="line"><span class="number">13.</span> JavaScript</span><br><span class="line">document.write(<span class="string">'Hello, World'</span>);</span><br><span class="line"><span class="number">14.</span> Logo</span><br><span class="line"><span class="keyword">print</span> [Hello, World]</span><br><span class="line"><span class="number">15.</span> jQuery</span><br><span class="line">$(<span class="string">"body"</span>).append(<span class="string">"Hello, World"</span>);</span><br><span class="line"><span class="number">16.</span> Perl <span class="number">5</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Hello, World"</span>;</span><br><span class="line"><span class="number">17.</span> Pascal</span><br><span class="line">program HelloWorld;</span><br><span class="line">begin</span><br><span class="line">  WriteLn(<span class="string">'Hello, World'</span>);</span><br><span class="line">end.</span><br><span class="line"><span class="number">18.</span> Objective-C</span><br><span class="line"><span class="comment">#import </span></span><br><span class="line"><span class="comment">#import </span></span><br><span class="line"> </span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@<span class="string">"Hello, World"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">19.</span> Visual Basic .NET</span><br><span class="line">Module Module1</span><br><span class="line">    Sub Main()</span><br><span class="line">        Console.WriteLine(<span class="string">"Hello, World"</span>)</span><br><span class="line">    End Sub</span><br><span class="line">End Module</span><br><span class="line"><span class="number">20.</span> R</span><br><span class="line">cat(<span class="string">'Hello, World'</span>)</span><br><span class="line"><span class="number">21.</span> VBScript</span><br><span class="line">MsgBox <span class="string">"Hello, World"</span></span><br><span class="line"><span class="number">22.</span> XSLT</span><br><span class="line">      Hello, World</span><br><span class="line"><span class="number">23.</span> Processing</span><br><span class="line">void setup()&#123;</span><br><span class="line">  println(<span class="string">"Hello, World"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">24.</span> Ruby</span><br><span class="line">puts <span class="string">"Hello, World"</span></span><br><span class="line"><span class="number">25.</span> Swift</span><br><span class="line">print(<span class="string">"Hello, World"</span>)</span><br><span class="line"><span class="number">26.</span> Python</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Hello, World"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随便玩玩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/16/hello-world/"/>
      <url>/2020/05/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hello World </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随便玩玩 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
